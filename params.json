{
  "name": "RPi Vibration Measurement",
  "tagline": "",
  "body": "<a href=\"https://loruro.github.io/\"><sub>⟵ Back</sub></a>\r\n\r\nThis is the project of the device based on [Raspberry Pi 2 B](https://www.raspberrypi.org/) and [RTEMS](https://www.rtems.org/) intended for universal measurements of vibrations of machines and other physical properties.\r\n\r\n## Setting up an RTEMS development environment\r\nThanks to the [Alan's Tech Notes](http://alanstechnotes.blogspot.com/2013/03/rtems-on-raspberry-pi.html) I managed to set up development environment properly on Ubuntu 16.04 64-bit.  \r\nSteps:\r\n```Shell\r\nmkdir ~/development/rtems/compiler\r\ncd ~/development/rtems\r\n\r\ngit clone git://git.rtems.org/rtems-source-builder.git\r\ncd rtems-source-builder\r\nsource-builder/sb-check\r\n```\r\nYou should see something like:\r\n```\r\nRTEMS Source Builder - Check, 4.12 (1c68dbb29392)\r\nEnvironment is ok\r\n```\r\nNext:\r\n```Shell\r\ncd rtems\r\n../source-builder/sb-set-builder --log=build-log.txt --prefix=$HOME/development/rtems/compiler/4.12 4.12/rtems-arm\r\n```\r\nIt will take a while.  \r\nAfter successful build, edit _.profile_ in your _$HOME_ directory and add:\r\n```Shell\r\nPATH=$HOME/development/rtems/compiler/4.12/bin:$PATH\r\n```\r\nLogout and login back. After entering:\r\n```Shell\r\narm-rtems4.12-gcc -v\r\n```\r\nYou should see compiler version.  \r\nNow follow next steps:\r\n```Shell\r\ncd ~/development/rtems\r\ngit clone git://git.rtems.org/rtems.git rtems-git\r\ncd rtems-git\r\n./bootstrap\r\n\r\ncd ~/development/rtems\r\nmkdir build-rtems-rpi\r\ncd build-rtems-rpi\r\n../rtems-git/configure --target=arm-rtems4.12 --enable-rtemsbsp=raspberrypi2 --enable-tests=samples --enable-networking --enable-posix --prefix=$HOME/development/rtems/bsps/4.12\r\nmake install\r\n```\r\nNow environment should be ready.\r\n\r\n## Simple example\r\n\r\nFirst, I wanted to test some basic interfaces and OS API functions.  \r\nI connected my custom board with [HD44780 LCD](https://en.wikipedia.org/wiki/Hitachi_HD44780_LCD_controller) display and push button to Raspberry Pi by GPIO expansion in the following configuration:\r\n* Button - GPIO 26\r\n* HD44780 RS - GPIO 14\r\n* HD44780 E - GPIO 15\r\n* HD44780 D4 - GPIO 18\r\n* HD44780 D5 - GPIO 23\r\n* HD44780 D6 - GPIO 24\r\n* HD44780 D7 - GPIO 25\r\n\r\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/loruro/RPi_Vibration_Measurement/master/img/simple_example.jpg\" height=\"206\"/></div>\r\n\r\nNext, I created basic application which displayed 0 or 1 on display whether the button was pushed or not. It utilized RTEMS API, including threads and mutexes.  \r\nThe example application is placed in [src](https://github.com/loruro/RPi_Vibration_Measurement/tree/master/src) directory. To build run:\r\n```Shell\r\nmake\r\n```\r\nTo run the example on Raspberry Pi go into the resulting folder with binaries and get _.ralf_ file. Rename it to _kernel.img_ and place in empty SD card. Files [bootcode.bin](https://github.com/raspberrypi/firmware/blob/master/boot/bootcode.bin) and [start.elf](https://github.com/raspberrypi/firmware/blob/master/boot/start.elf) have to be placed on SD card as well (some versions of these files didn't work for me).  \r\nAfter placing SD card in Raspberry Pi and powering it up, 0 should be visible on the display.\r\n\r\nAlso I managed to successfully run UART console together with I²C and SPI interfaces (not included in above example).\r\n\r\n## To Be Continued\r\n\r\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons Licence\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br /><span xmlns:dct=\"http://purl.org/dc/terms/\" property=\"dct:title\">RPi Vibration Measurement</span> by <span xmlns:cc=\"http://creativecommons.org/ns#\" property=\"cc:attributionName\">Karol Leszczyński</span> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\r\n\r\n<a href=\"https://loruro.github.io/\"><sub>⟵ Back</sub></a>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}